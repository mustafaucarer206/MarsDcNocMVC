@model IEnumerable<MarsDcNocMVC.Models.ServerPingStatus>

@{
    ViewData["Title"] = "Sunucu Durumları";
}

<style>
    .server-card {
        transition: all 0.3s ease;
        border: none;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
    }
    
    .server-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);
    }
    
    .status-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 8px;
        animation: pulse 2s infinite;
    }
    
    .status-online {
        background-color: #28a745;
    }
    
    .status-offline {
        background-color: #dc3545;
    }
    
    .status-unknown {
        background-color: #6c757d;
    }
    
    @@keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
    }
    
    .server-type-icon {
        width: 32px;
        height: 32px;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 12px;
        font-size: 14px;
        font-weight: 600;
        color: white;
    }
    
    .icon-lms { background: linear-gradient(135deg, #667eea, #764ba2); }
    .icon-vista { background: linear-gradient(135deg, #f093fb, #f5576c); }
    .icon-dsl { background: linear-gradient(135deg, #4facfe, #00f2fe); }
    .icon-4g { background: linear-gradient(135deg, #43e97b, #38f9d7); }
    .icon-dcp { background: linear-gradient(135deg, #fa709a, #fee140); }
    .icon-qube { background: linear-gradient(135deg, #a8edea, #fed6e3); }
    
    .stats-card {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        border-radius: 12px;
        border: none;
    }
    
    .location-header {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border-left: 4px solid #007bff;
        border-radius: 8px;
        padding: 15px 20px;
        margin-bottom: 20px;
    }
    
    .server-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }
    
    .response-time {
        font-size: 12px;
        color: #6c757d;
        margin-top: 4px;
    }
    
    .last-update {
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 8px 16px;
        font-size: 12px;
    }
    
    /* Modern Inputs */
    .modern-input {
        border: 2px solid #e9ecef;
        border-radius: 0.75rem;
        padding: 0.75rem 1rem;
        transition: all 0.3s ease;
    }
    
    .modern-input:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }
</style>

<div class="container-fluid py-4">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-1 text-dark fw-bold">
                        <i class="fas fa-server text-primary me-2"></i>
                        Sunucu Durumları
                    </h1>
                    <p class="text-muted mb-0">Tüm lokasyonların sunucu durumlarını gerçek zamanlı takip edin</p>
                </div>
                <div class="d-flex align-items-center gap-3">
                    <a href="@Url.Action("TableView", "ServerPing")" class="btn btn-outline-secondary">
                        <i class="fas fa-table me-1"></i> Tablo Görünümü
                    </a>
                    <div class="last-update">
                        <i class="fas fa-clock text-muted me-1"></i>
                        <span id="lastUpdateTime">@DateTime.Now.ToString("HH:mm:ss")</span>
                    </div>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="autoRefreshToggle" checked>
                        <label class="form-check-label" for="autoRefreshToggle">
                            <small><i class="fas fa-sync-alt me-1"></i>Otomatik Yenileme</small>
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modern Filter Card -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-light">
            <h5 class="card-title mb-0">
                <i class="fas fa-filter text-primary me-2"></i>Filtreleme ve Arama
            </h5>
        </div>
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-4">
                    <label for="locationFilter" class="form-label fw-semibold">
                        <i class="fas fa-map-marker-alt me-1"></i>Lokasyon
                    </label>
                    <select class="form-select modern-input" id="locationFilter" name="locationFilter">
                        <option value="">Tüm Lokasyonlar</option>
                        @if (ViewBag.Locations != null)
                        {
                            @foreach (string location in ViewBag.Locations)
                            {
                                <option value="@location" selected="@(ViewBag.LocationFilter == location)">@location</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-6">
                    <label for="searchString" class="form-label fw-semibold">
                        <i class="fas fa-search me-1"></i>Arama
                    </label>
                    <input type="text" class="form-control modern-input" id="searchString" name="searchString" placeholder="Sunucu adı, IP veya lokasyon ara..." value="@ViewBag.SearchString">
                </div>
                <div class="col-md-2 d-flex align-items-end gap-2">
                    <button type="submit" class="btn btn-primary modern-btn flex-fill">
                        <i class="fas fa-filter me-1"></i>Filtrele
                    </button>
                    <a href="@Url.Action("Index")" class="btn btn-outline-secondary modern-btn">
                        <i class="fas fa-undo me-1"></i>
                    </a>
                </div>
            </form>
        </div>
    </div>

    <!-- İstatistikler -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card stats-card text-center">
                <div class="card-body">
                    <i class="fas fa-building fa-2x mb-2"></i>
                    <h4 class="mb-0" id="totalLocations">@Model.GroupBy(s => s.LocationName).Count()</h4>
                    <small>Toplam Lokasyon</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stats-card text-center">
                <div class="card-body">
                    <i class="fas fa-server fa-2x mb-2"></i>
                    <h4 class="mb-0" id="totalServers">@Model.Count()</h4>
                    <small>Toplam Sunucu</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stats-card text-center">
                <div class="card-body">
                    <i class="fas fa-check-circle fa-2x mb-2"></i>
                    <h4 class="mb-0 text-success" id="onlineServers">@Model.Count(s => s.IsOnline)</h4>
                    <small>Online Sunucu</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stats-card text-center">
                <div class="card-body">
                    <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                    <h4 class="mb-0 text-warning" id="offlineServers">@Model.Count(s => !s.IsOnline)</h4>
                    <small>Offline Sunucu</small>
                </div>
            </div>
        </div>
    </div>

    @if (ViewBag.Error != null)
    {
        <div class="alert alert-danger border-0 shadow-sm">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @ViewBag.Error
        </div>
    }

    <!-- Sunucu Durumları -->
    <div id="serverStatusContainer">
        @foreach (var location in Model.GroupBy(s => s.LocationName).OrderBy(g => g.Key))
        {
            <div class="location-section mb-5">
                <div class="location-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0 fw-bold text-dark">
                            <i class="fas fa-map-marker-alt text-primary me-2"></i>
                            @location.Key
                        </h5>
                        <div class="d-flex align-items-center">
                            @{
                                var onlineCount = location.Count(s => s.IsOnline);
                                var totalCount = location.Count();
                            }
                            <span class="badge bg-@(onlineCount == totalCount ? "success" : onlineCount > 0 ? "warning" : "danger") rounded-pill">
                                @onlineCount/@totalCount Online
                            </span>
                        </div>
                    </div>
                </div>

                <div class="server-grid">
                    @foreach (var server in location.OrderBy(s => GetServerPriority(s.ServerName)).ThenBy(s => s.ServerName))
                    {
                        <div class="card server-card">
                            <div class="card-body">
                                <div class="d-flex align-items-center mb-3">
                                    <div class="server-type-icon @GetServerIconClass(server.ServerName)">
                                        @GetServerIconText(server.ServerName)
                                    </div>
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1 fw-bold">@server.ServerName</h6>
                                        <small class="text-muted">@server.IPAddress</small>
                                    </div>
                                    <div class="text-end">
                                        <span class="status-indicator @(server.IsOnline ? "status-online" : "status-offline")"></span>
                                    </div>
                                </div>

                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="badge bg-@(server.IsOnline ? "success" : "danger") bg-opacity-10 text-@(server.IsOnline ? "success" : "danger") border border-@(server.IsOnline ? "success" : "danger") rounded-pill px-3 py-2">
                                        <i class="fas fa-@(server.IsOnline ? "check" : "times") me-1"></i>
                                        @(server.IsOnline ? "Online" : "Offline")
                                    </span>
                                    @if (server.ResponseTime.HasValue && server.IsOnline)
                                    {
                                        <small class="text-muted">
                                            <i class="fas fa-clock me-1"></i>
                                            @server.ResponseTime ms
                                        </small>
                                    }
                                </div>



                                <div class="response-time">
                                    <i class="fas fa-history me-1"></i>
                                    Son kontrol: @server.LastPingTime.ToString("HH:mm:ss")
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@functions {
    private int GetServerPriority(string serverName)
    {
        if (serverName.Contains("LMS")) return 1;
        if (serverName.Contains("Vista")) return 2;
        if (serverName.Contains("Qube")) return 3;
        if (serverName.Contains("DSL")) return 4;
        if (serverName.Contains("4G")) return 5;
        if (serverName.Contains("DCP")) return 6;
        return 999; // Diğerleri en sona
    }
    
    private string GetServerIconClass(string serverName)
    {
        if (serverName.Contains("LMS")) return "icon-lms";
        if (serverName.Contains("Vista")) return "icon-vista";
        if (serverName.Contains("DSL")) return "icon-dsl";
        if (serverName.Contains("4G")) return "icon-4g";
        if (serverName.Contains("DCP")) return "icon-dcp";
        if (serverName.Contains("Qube")) return "icon-qube";
        return "icon-lms";
    }

    private string GetServerIconText(string serverName)
    {
        if (serverName.Contains("LMS")) return "LMS";
        if (serverName.Contains("Vista")) return "VIS";
        if (serverName.Contains("DSL")) return "DSL";
        if (serverName.Contains("4G")) return "4G";
        if (serverName.Contains("DCP")) return "DCP";
        if (serverName.Contains("Qube")) return "QUB";
        return "SRV";
    }
}

@section Scripts {
    <script>
        let autoRefreshInterval;

        $(document).ready(function () {
            startAutoRefresh();

            $('#autoRefreshToggle').change(function() {
                if (this.checked) {
                    startAutoRefresh();
                } else {
                    stopAutoRefresh();
                }
            });

            // Form submit efekti
            $('form').on('submit', function() {
                $(this).find('button[type="submit"]').html('<i class="fas fa-spinner fa-spin me-1"></i>Filtreleniyor...');
            });
        });

        function startAutoRefresh() {
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
            }
            
            autoRefreshInterval = setInterval(function() {
                refreshServerStatus();
            }, 30000);
        }

        function stopAutoRefresh() {
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
                autoRefreshInterval = null;
            }
        }

        function refreshServerStatus() {
            $.ajax({
                url: '@Url.Action("GetServerStatusData", "ServerPing")',
                type: 'GET',
                success: function(data) {
                    updateServerCards(data);
                    updateStats(data);
                    updateLastUpdateTime();
                },
                error: function(xhr, status, error) {
                    console.error('Veri güncelleme hatası:', error);
                    showNotification('Veriler güncellenirken bir hata oluştu!', 'error');
                }
            });
        }

        function updateServerCards(serverData) {
            // Verileri lokasyonlara göre grupla
            const groupedData = {};
            serverData.forEach(function(server) {
                if (!groupedData[server.locationName]) {
                    groupedData[server.locationName] = [];
                }
                groupedData[server.locationName].push(server);
            });

            // Container'ı yeniden oluştur
            const container = $('#serverStatusContainer');
            container.empty();

            Object.keys(groupedData).sort().forEach(function(locationName) {
                const servers = groupedData[locationName];
                const onlineCount = servers.filter(s => s.isOnline).length;
                const totalCount = servers.length;
                
                const badgeClass = onlineCount === totalCount ? 'success' : (onlineCount > 0 ? 'warning' : 'danger');

                let locationHTML = `
                    <div class="location-section mb-5">
                        <div class="location-header">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="mb-0 fw-bold text-dark">
                                    <i class="fas fa-map-marker-alt text-primary me-2"></i>
                                    ${locationName}
                                </h5>
                                <span class="badge bg-${badgeClass} rounded-pill">
                                    ${onlineCount}/${totalCount} Online
                                </span>
                            </div>
                        </div>
                        <div class="server-grid">
                `;

                servers.sort((a, b) => {
                    const priorityA = getServerPriority(a.serverName);
                    const priorityB = getServerPriority(b.serverName);
                    if (priorityA !== priorityB) {
                        return priorityA - priorityB;
                    }
                    return a.serverName.localeCompare(b.serverName);
                }).forEach(function(server) {
                    const iconClass = getServerIconClass(server.serverName);
                    const iconText = getServerIconText(server.serverName);
                    const statusClass = server.isOnline ? 'success' : 'danger';
                    const statusIcon = server.isOnline ? 'check' : 'times';
                    const statusText = server.isOnline ? 'Online' : 'Offline';
                    
                    locationHTML += `
                        <div class="card server-card">
                            <div class="card-body">
                                <div class="d-flex align-items-center mb-3">
                                    <div class="server-type-icon ${iconClass}">
                                        ${iconText}
                                    </div>
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1 fw-bold">${server.serverName}</h6>
                                        <small class="text-muted">${server.ipAddress}</small>
                                    </div>
                                    <div class="text-end">
                                        <span class="status-indicator ${server.isOnline ? 'status-online' : 'status-offline'}"></span>
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="badge bg-${statusClass} bg-opacity-10 text-${statusClass} border border-${statusClass} rounded-pill px-3 py-2">
                                        <i class="fas fa-${statusIcon} me-1"></i>
                                        ${statusText}
                                    </span>
                                    ${server.responseTime && server.isOnline ? `
                                        <small class="text-muted">
                                            <i class="fas fa-clock me-1"></i>
                                            ${server.responseTime} ms
                                        </small>
                                    ` : ''}
                                </div>

                                <div class="response-time">
                                    <i class="fas fa-history me-1"></i>
                                    Son kontrol: ${new Date(server.lastPingTime).toLocaleTimeString('tr-TR')}
                                </div>
                            </div>
                        </div>
                    `;
                });

                locationHTML += '</div></div>';
                container.append(locationHTML);
            });
        }

        function updateStats(serverData) {
            const locations = [...new Set(serverData.map(s => s.locationName))];
            const onlineServers = serverData.filter(s => s.isOnline).length;
            const offlineServers = serverData.filter(s => !s.isOnline).length;

            $('#totalLocations').text(locations.length);
            $('#totalServers').text(serverData.length);
            $('#onlineServers').text(onlineServers);
            $('#offlineServers').text(offlineServers);
        }

        function updateLastUpdateTime() {
            const now = new Date();
            $('#lastUpdateTime').text(now.toLocaleTimeString('tr-TR'));
        }

        function getServerPriority(serverName) {
            if (serverName.includes('LMS')) return 1;
            if (serverName.includes('Vista')) return 2;
            if (serverName.includes('Qube')) return 3;
            if (serverName.includes('DSL')) return 4;
            if (serverName.includes('4G')) return 5;
            if (serverName.includes('DCP')) return 6;
            return 999; // Diğerleri en sona
        }

        function getServerIconClass(serverName) {
            if (serverName.includes('LMS')) return 'icon-lms';
            if (serverName.includes('Vista')) return 'icon-vista';
            if (serverName.includes('DSL')) return 'icon-dsl';
            if (serverName.includes('4G')) return 'icon-4g';
            if (serverName.includes('DCP')) return 'icon-dcp';
            if (serverName.includes('Qube')) return 'icon-qube';
            return 'icon-lms';
        }

        function getServerIconText(serverName) {
            if (serverName.includes('LMS')) return 'LMS';
            if (serverName.includes('Vista')) return 'VIS';
            if (serverName.includes('DSL')) return 'DSL';
            if (serverName.includes('4G')) return '4G';
            if (serverName.includes('DCP')) return 'DCP';
            if (serverName.includes('Qube')) return 'QUB';
            return 'SRV';
        }

        function showNotification(message, type = 'info') {
            const alertClass = type === 'error' ? 'alert-danger' : 'alert-info';
            const icon = type === 'error' ? 'fa-exclamation-triangle' : 'fa-info-circle';
            
            const notification = $(`
                <div class="alert ${alertClass} alert-dismissible fade show position-fixed" 
                     style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                    <i class="fas ${icon} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `);
            
            $('body').append(notification);
            
            setTimeout(() => {
                notification.alert('close');
            }, 5000);
        }

        $(window).on('beforeunload', function() {
            stopAutoRefresh();
        });

        function decodeHtml(html) {
            var txt = document.createElement("textarea");
            txt.innerHTML = html;
            return txt.value;
        }
    </script>
} 